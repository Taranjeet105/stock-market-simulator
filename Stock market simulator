// C++ program to find out maximum profit by
// buying and selling a share atmost k times
// given stock price of n days
#include <iostream>
#include<fstream>
#include <climits>
#include<stack>
using namespace std;
class traderAccount
{
	string name;
	int age;
	string ID;
	string password;
	int perm;
	float balance;
	public:
traderAccount(){perm=0;balance=2500.00;}
     void updateBalance(float bal)
     {
     	balance+=bal;
     }
	void accountHolder()
	{
		cout<<"Enter name:";
		cin>>name;
		cout<<"Enter age:";
		cin>>age;
		cout<<"User id:";
		cin>>ID;
		cout<<"Enter password:";
		cin>>password;
	}
	int getAge()
	{
		return age;
		
	}
	string getID()
	{
		return ID;
	}
	void setPassword()
	{
		cout<<"Entet new password:";
		cin>>password;
	}
	string getPassword()
	{
		return password;
	}
	float getBalance()
	{   
	
	return balance;
	}
	string getName()
	{
		
		
		return name;
	}
	int getPer()
	{
		return perm;
	}

void permitted()
{
	
	perm=1;
}

	
	
};

void productPriceListGenerator(float price[],int n,traderAccount &c1)
{   int w;
	srand((unsigned) time(0));
  float randomNumber;
  cout<<"1.abc(150-175)";
  cout<<endl;
    cout<<"2.abc(75-82)";
  cout<<endl;
    cout<<"3.abc(89-96)";
  cout<<endl;
  int p,N;
  float temp1,temp2;
 do{
  cout<<"select product:"<<endl;
  cin>>w;  
  switch(w)
  {
  	case 1:p=150;
  	             N=15;
  	           break;
       
      case 2:p=75;
                   N=8;
  	           break;
  	
  	case 3:p=89;
  	             N=9;
  	            break;
  	 
  }  
  temp2=c1.getBalance();
  temp1=p+N;
  if(temp1>temp2)
 { cout<<"insufficient balance for this product please select product under "<<temp2<<endl;}
}
 while(temp1>temp2);

  for (int index = 0; index <n; index++) {
    randomNumber = (p+rand() % N); 
	price[index]=randomNumber;
	
}

}

void LCG(int Z,int a,int m,int c,float randArray[],int l)
{   int i=0;  float ui;
      cout<<endl;
cout<<"Product gain/loss in different days:-"<<endl;
     for( i=1;i<=l;i++)
	{
		Z=(a*Z+c)%m;
    	ui=float(Z)/float(m);
    	if(i%2==0||i%7==0||i%13==0)
    	{
    		randArray[i-1]-=ui*15.9763;
    	 cout<<"day"<<"   "<<i<<"   "<<"-"<<ui*15.9763;
    	}
    	else
   {	randArray[i-1]+=ui*157.9763;
 cout<<"day"<<"   "<<i<<"   "<<ui*157.9763;
  }
    cout<<endl;
    
	}
	
}

/*
Stock span is defined as a number of consecutive days prior to the current day when the price of a stock was less than or equal to the price at current day.
*/
void stockSpan(float price[], int size)  {
	// Write your code here
    int *arr = new int[size];
    stack<int> s1;
    
    int count = 1;
    arr[0] = 1;
    s1.push(0);
    
    for(int i=1; i<size; i++)
    {   
        while(s1.size() != 0 && price[s1.top()] < price[i])
        {
            s1.pop();
        }
        if(s1.size() == 0)
        {
            count = i+1;
        }
        else if(price[s1.top()] >= price[i])
        {
            count = i - s1.top();
        }
        
        s1.push(i);
        arr[i] = count;
    }
    for(int i=0;i<size;i++)
    price[i]=arr[i];
}


// Function to find out maximum profit by buying & selling a share atmost k
//times given stock price of n days
float Profit(float price[], int n, int k)
{
// table to store results of subproblems profit[t][i] stores maximum
//profit using almost t transactions up to day i (including day i)
float profit[k + 1][n + 1];
// For day 0, you can't earn money irrespective of how many times
//you trade
for (int i = 0; i <= k; i++)
{
profit[i][0] = 0;
}
// profit is 0 if we don't do any transaction (i.e. k =0)
for (int j = 0; j <= n; j++)
{
profit[0][j] = 0;
}
// fill the table in bottom-up fashion
for (int i = 1; i <= k; i++)
{for (int j = 1; j < n; j++)
{
float max_so_far = INT_MIN;
for(int m = 0; m < j; m++)
{
max_so_far = max(max_so_far, price[j] - price[m] +
profit[i - 1][m]);
}
profit[i][j] = max(profit[i][j - 1],max_so_far);
}
}
return profit[k][n - 1];
}
void insert()
{  traderAccount c;
   c.accountHolder();
  ofstream w("detail.dat",ios::binary|ios::app);
  if(!w){cout<<"couldnt open file";exit(0);}
   w.write((char*)&c,sizeof(c));
   w.close();
}
traderAccount& get()
{   string id,p;
     cout<<"Enter ID:";
     cin>>id;
     cout<<"Enter password:";
     cin>>p;
	traderAccount *c=new traderAccount();
ifstream r("detail.dat",ios::binary|ios::in);
     while(r.read((char*)&(*c),sizeof(*c)))
     {
 if(id==c->getID()&&p==c->getPassword())
         {c->permitted();
            break;
         }
     }
     r.close();
	return *c;
}
void update(traderAccount c1,float bal)
{  traderAccount c;
ofstream w("temp.dat",ios::binary);
ifstream r("detail.dat",ios::binary|ios::in);
while(r.read((char*)&c,sizeof(c)))
{
	if(c1.getName()==c.getName()&&c1.getPassword()==c.getPassword()&&c1.getID()==c.getID())
	{
		c.updateBalance(bal);/////////
	}
	w.write((char*)&c,sizeof(c));
	
}
w.close();
r.close();
remove("detail.dat");
rename("temp.dat","detail.dat");
}
void forgotPassword(traderAccount c1)
{
	traderAccount c;
	string n,id;
	int age;
	cout<<"Enter name:";
	cin>>n;
	cout<<"Enter age:";
	cin>>age;
	cout<<"Enter ID";
	cin>>id;
	ofstream w("temp.dat",ios::binary);
ifstream r("detail.dat",ios::binary|ios::in);
 while(r.read((char*)&c,sizeof(c)))
 {
 	if(c.getName()==c1.getName()&&c.getAge()==c1.getAge()&&c.getID()==c1.getID())
 	{
 		c.setPassword();
 	}
 	w.write((char*)&c,sizeof(c));
 	
 }
 w.close();
 r.close();
 remove("detail.dat");
 rename("temp.dat","detail.dat");/////////
	
}
void show()
{
	traderAccount c;
ifstream r("detail.dat",ios::binary|ios::in);
if(!r)
{
	cout<<"file couldn't open!!!!"<<endl;
}
else{
	
while(r.read((char*)&c,sizeof(c)))
{
	cout<<"Name:"<<c.getName()<<endl;
	cout<<"User ID:"<<c.getID()<<endl;
cout<<"balance: "<<c.getBalance()<<endl;
	cout<<endl;
	cout<<endl;
}

}
	r.close();
}

// Driver code
int main()
{  char yes; traderAccount c1;
 do{
 	cout<<" Do you want to anAdd acount(y/n):";
 	cin>>yes;
 	if(yes=='y')
      insert();
 }while(yes=='y');
 traderAccount temp;
 temp=get();
 int x=temp.getPer();
 if(x)
 {   cout<<"successfully logged in"<<endl;
 	cout<<"hello!! "<<endl;
 	 cout<<temp.getName()<<endl;
 cout<<"balance:"<<temp.getBalance()<<endl;

int n,k;
cout << "Enter Number of days : ";
cin >> n;
float* price = new float[n];
//cout << "Enter prices of product on different days : " << endl;
productPriceListGenerator(price,n,temp);
cout<<"price list initially:"<<endl;
 for(int i=0; i<n; i++)
{
cout<< price[i]<<endl;
}
cout<<endl;
 LCG(13,3,32,7,price,n);//library routines
 cout<<endl;
 cout<<"final price list:"<<endl;
 for(int i=0; i<n; i++)
{
cout<< price[i]<<endl;
}
cout<<endl;
cout << "\nEnter k(buys and sells one can do) : ";
cin>>k;
cout << "\nMaximum profit is : ";
float profitEarned=Profit(price, n, k);
cout<<profitEarned<<endl;

update(temp,profitEarned);/////

stockSpan(price,n);
cout<<endl;
cout<<"stock span: ";
for(int i=0;i<n;i++)
{
cout<<price[i]<<" ";
	
}
 }
 else{
 	char select;
 	cout<<"forgot Your password?(y/n):";
 	cin>>select;
 	if(select=='y')
 	{
 		forgotPassword(temp);
 		
 	}
 }
 char select;
 cout<<endl;
 cout<<"show all accounts?(y/n):";
 cin>>select;
 if(select=='y')
 {
 	show();
 }
return 0;
}
